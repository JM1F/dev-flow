<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:navigation="clr-namespace:dev_flow.Managers.Navigation"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    <!-- Styles & DataTemplate for HamburgerMenu control -->
    <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type controls:HamburgerMenuIconItem}">
        <Grid Height="48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:HamburgerMenu}}, Path=CompactPaneLength}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl Grid.Column="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{Binding Icon}"
                            Focusable="False"
                            IsTabStop="False" />
            <TextBlock Grid.Column="1"
                       VerticalAlignment="Center"
                       FontSize="16"
                       Text="{Binding Label}" />
        </Grid>
    </DataTemplate>

    <ObjectDataProvider x:Key="DisplayModeEnumValues"
                        MethodName="GetValues"
                        ObjectType="{x:Type controls:SplitViewDisplayMode}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="controls:SplitViewDisplayMode" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="VisibilityEnumValues"
                        MethodName="GetValues"
                        ObjectType="{x:Type Visibility}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="Visibility" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <Style x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple"
           BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem}"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid x:Name="RootGrid"
                          Background="Transparent"
                          RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                        <controls:ClipBorder x:Name="Background"
                                             Background="{TemplateBinding Background}"
                                             CornerRadius="{TemplateBinding controls:ControlsHelper.CornerRadius}"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <controls:ClipBorder x:Name="Border"
                                             BorderBrush="{TemplateBinding BorderBrush}"
                                             BorderThickness="{TemplateBinding BorderThickness}"
                                             CornerRadius="{TemplateBinding controls:ControlsHelper.CornerRadius}"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid>
                                <Grid HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Rectangle x:Name="SelectionIndicator"
                                               Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                               Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                               Fill="{TemplateBinding Foreground}"
                                               Focusable="False"
                                               Opacity="0.0" />
                                </Grid>
                                <materialDesign:Ripple x:Name="ContentPresenter"
                                                       Padding="{TemplateBinding Padding}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       Content="{TemplateBinding Content}"
                                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                       Feedback="{DynamicResource MahApps.Brushes.Gray.MouseOver}"
                                                       Focusable="False"
                                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </controls:ClipBorder>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <Trigger Property="controls:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                        </Trigger>
                        <Trigger Property="controls:ItemHelper.IsMouseRightButtonPressed" Value="True">
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="RootGrid" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="controls:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
        <Setter Property="controls:ItemHelper.ActiveSelectionForegroundBrush"
                Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="controls:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="controls:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="controls:ItemHelper.DisabledSelectedForegroundBrush"
                Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="controls:ItemHelper.HoverBackgroundBrush"
                Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
        <Setter Property="controls:ItemHelper.HoverSelectedBackgroundBrush"
                Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
        <Setter Property="controls:ItemHelper.HoverSelectedForegroundBrush"
                Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="controls:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="controls:ItemHelper.SelectedForegroundBrush"
                Value="{DynamicResource MahApps.Brushes.AccentBase}" />
    </Style>

    <Style x:Key="MahApps.Styles.HamburgerMenu.Ripple"
           BasedOn="{StaticResource MahApps.Styles.HamburgerMenu}"
           TargetType="{x:Type controls:HamburgerMenu}">
        <Setter Property="ItemContainerStyle"
                Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
        <Setter Property="OptionsItemContainerStyle"
                Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
        <Setter Property="PaneBackground" Value="#222222" />
        <Setter Property="PaneForeground" Value="#FFFFFF" />
        <Setter Property="ShowSelectionIndicator" Value="True" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type Frame}}"
           TargetType="{x:Type Frame}">
        <Setter Property="Background"
                Value="{DynamicResource MahApps.Brushes.Accent4}" />
        <Setter Property="ClipToBounds"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_FrameCP">
                            <ContentPresenter.RenderTransform>
                                <TranslateTransform />
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>